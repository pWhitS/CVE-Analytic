import sys
import math


def percentChange(v1, v2, growth):
	if int(v1) == 0:
		div1 = 1
	elif int(v1) > 0:
		div1 = v1
	else:
		print "wat.."

	return (((int(v2) - int(v1)) / math.fabs(int(div1))) * 100)


#returns average change over the given period of time
def calculateEffects(vBeforeList, vAfterList):
	i = beforeTotalChange = 0
	while i < len(vBeforeList)-1:
		beforeTotalChange += percentChange(vBeforeList[i], vBeforeList[i+1], 0)
		i += 1

	print beforeTotalChange, beforeTotalChange/len(vBeforeList)

	i = afterTotalChange = 0
	while i < len(vAfterList)-1:
		afterTotalChange += percentChange(vAfterList[i], vAfterList[i+1], 0)
		i += 1

	print afterTotalChange, afterTotalChange/len(vAfterList)
	print 

	return beforeTotalChange/len(vBeforeList), afterTotalChange/len(vAfterList)


def convertListStringToListDict(beforeList, afterList):
	for i in range(len(beforeList)):
		beforeList[i] = dict(item.split(":") for item in beforeList[i].split(","))

	for i in range(len(afterList)):
		afterList[i] = dict(item.split(":") for item in afterList[i].split(","))

	return beforeList, afterList


def getDateRange(beforeList, afterList):
	mn = min([beforeList[i]["Date"] for i in range(len(beforeList))])
	mx = max([afterList[i]["Date"] for i in range(len(afterList))])
	return mn, mx


def calcIndividualGrowth(beforeList, afterList):
	for vkey in beforeList[0]:
		if vkey == "Date":
			continue

		vulnsBefore = []
		vulnsAfter = []

		#loop over all lists of vulnerabilties in the window
		for vulns in beforeList:
			vulnsBefore.append(vulns[vkey]) 

		for vulns in afterList:
			vulnsAfter.append(vulns[vkey])

		print vkey
		calculateEffects(vulnsBefore, vulnsAfter)


def calcGroupGrowth(beforeList, afterList):
	beforeTotal = []
	afterTotal = []

	for vulns in beforeList:
		temptot = 0
		for vkey in beforeList[0]:
			if vkey == "Date":
				continue
			temptot += int(vulns[vkey])
		
		beforeTotal.append(temptot)

	for vulns in afterList:
		temptot = 0
		for vkey in afterList[0]:
			if vkey == "Date":
				continue
			temptot += int(vulns[vkey])
		
		afterTotal.append(temptot)

	avgBefore, avgAfter = calculateEffects(beforeTotal, afterTotal)
	return avgBefore, avgAfter



#---MAIN---#
filename = sys.argv[1]
window = int(sys.argv[2])

with open(filename, 'r') as fin:
	eventList = fin.readlines()

with open("month.csv", 'r') as fmonth:
	cveMonthList = fmonth.readlines()


for event in eventList:
	event = event.strip()
	name, date, os = event.split(',')
	month, day, year = date.split('-')

	print name, os, date
	print "=================="

	beforeList = []
	afterList = []
	isAfter = False

	for line in cveMonthList:
		line = line.strip()

		eventDate = str(year) + "-" + str(month)
		cveDate = line.split(',')[0].split(':')[1]

		if eventDate == cveDate:
			isAfter = True

		if isAfter and len(afterList) < window + 1:
			afterList.append(line)
		elif not isAfter:
			if len(beforeList) < window:
				beforeList.append(line)
			else:
				beforeList = beforeList[1:]
				beforeList.append(line)

	#convert lists of strings to lists of dictionaries
	beforeList, afterList = convertListStringToListDict(beforeList, afterList)
	
	#Get the minimum and maximum dates
	minDate, maxDate = getDateRange(beforeList, afterList)
	print minDate, maxDate

	#Caclulate growth for each vulnerability type
	calcIndividualGrowth(beforeList, afterList)

	#Calculate growth for total growth of vulerabilities
	totalAvgList = calcGroupGrowth(beforeList, afterList) #returns before and after averages

	break
	

