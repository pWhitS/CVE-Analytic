import sys
import math


def percentChange(v1, v2, growth):
	if int(v1) == 0:
		div1 = 1
	elif int(v1) > 0:
		div1 = v1
	else:
		print "wat.."

	return (((int(v2) - int(v1)) / math.fabs(int(div1))) * 100)


#returns average change over the given period of time
def calculateEffects(vBeforeList, vAfterList):
	i = beforeTotalChange = 0
	while i < len(vBeforeList)-1:
		beforeTotalChange += percentChange(vBeforeList[i], vBeforeList[i+1], 0)
		i += 1

	print beforeTotalChange, beforeTotalChange/len(vBeforeList)

	i = afterTotalChange = 0
	while i < len(vAfterList)-1:
		afterTotalChange += percentChange(vAfterList[i], vAfterList[i+1], 0)
		i += 1

	print afterTotalChange, afterTotalChange/len(vAfterList)
	print 

	return beforeTotalChange/len(vBeforeList), afterTotalChange/len(vAfterList)


def convertListStringToListDict(beforeList, afterList):
	for i in range(len(beforeList)):
		beforeList[i] = dict(item.split(":") for item in beforeList[i].split(","))

	for i in range(len(afterList)):
		afterList[i] = dict(item.split(":") for item in afterList[i].split(","))

	return beforeList, afterList


def getDateRange(beforeList, afterList):
	mn = min([beforeList[i]["Date"] for i in range(len(beforeList))])
	mx = max([afterList[i]["Date"] for i in range(len(afterList))])
	return mn, mx


def calcIndividualGrowth(beforeList, afterList):
	growthList = []
	for vkey in beforeList[0]:
		if vkey == "Date":
			continue

		vulnsBefore = []
		vulnsAfter = []

		#loop over all lists of vulnerabilties in the window
		for vulns in beforeList:
			vulnsBefore.append(vulns[vkey]) 

		for vulns in afterList:
			vulnsAfter.append(vulns[vkey])

		print vkey
		avgGrowth = calculateEffects(vulnsBefore, vulnsAfter)

		growthList.append(avgGrowth[0])
		growthList.append(avgGrowth[1])

	return growthList


def calcGroupGrowth(beforeList, afterList):
	beforeTotal = []
	afterTotal = []

	for vulns in beforeList:
		temptot = 0
		for vkey in beforeList[0]:
			if vkey == "Date":
				continue
			temptot += int(vulns[vkey])
		
		beforeTotal.append(temptot)

	for vulns in afterList:
		temptot = 0
		for vkey in afterList[0]:
			if vkey == "Date":
				continue
			temptot += int(vulns[vkey])
		
		afterTotal.append(temptot)

	avgBefore, avgAfter = calculateEffects(beforeTotal, afterTotal)
	return [avgBefore, avgAfter]


def generateJavascriptGraph(graphname, date, indivAvgList, totalAvgList):
	graphTitle = graphname + " | " + date
	graphname += ".html"
	hofl = open(graphname, "w")

	scriptStr = """<script type="text/javascript" src="https://www.google.com/jsapi"></script>
	<script>
google.load('visualization', '1', {packages: ['corechart', 'bar']});
google.setOnLoadCallback(drawBasic);

function drawBasic() {
	  var test = ""
      var data = new google.visualization.DataTable();
      data.addColumn('string', 'Exploit Type');
      data.addColumn('number', 'Before');
      data.addColumn('number', 'After')

      data.addRows([
        ["xss", %(ga)s, %(gb)s],
        ["privilegeEscalation", %(gc)s, %(gd)s],
        ["dirTraversal", %(ge)s, %(gf)s],
        ["codeExecution", %(gg)s, %(gh)s],
        ["sqlInjection", %(gi)s, %(gj)s],
        ["denialOfService", %(gk)s, %(gl)s],
        ["memCorruption", %(gm)s, %(gn)s],
        ["bufferOverflow", %(go)s, %(gp)s],
        ["heapOverflow", %(gq)s, %(gr)s],
        ["bypassAttacks", %(gs)s, %(gt)s],
        ["csrf", %(gu)s, %(gv)s],
        ["infoExposure", %(gw)s, %(gx)s],
        ["fileInclusion", %(gy)s, %(gz)s],
        ["total", %(tota)s, %(totb)s]
      ]);

      var options = {
        // width: 100,
        height: 700,
        title: '%(title)s',
        hAxis: {
          title: 'Exploit Type',
          format: '',
          viewWindow: {
            min: [2, 5, 0],
            max: [2, 5, 0]
          }
        },
        vAxis: {
          title: 'Avg Per Cent Growth'
        }
      };

      var chart = new google.visualization.ColumnChart(document.getElementById('chart_div'));

      chart.draw(data, options);
    }

</script>

<div id="chart_div"></div>""" % {'tota':str(totalAvgList[0]), 'totb':str(totalAvgList[1]),
								 'ga':str(indivAvgList[0]), 'gb':str(indivAvgList[1]),
								 'gc':str(indivAvgList[2]), 'gd':str(indivAvgList[3]),
								 'ge':str(indivAvgList[4]), 'gf':str(indivAvgList[5]),
								 'gg':str(indivAvgList[6]), 'gh':str(indivAvgList[7]),
								 'gi':str(indivAvgList[8]), 'gj':str(indivAvgList[9]),
								 'gk':str(indivAvgList[10]), 'gl':str(indivAvgList[11]),
								 'gm':str(indivAvgList[12]), 'gn':str(indivAvgList[13]),
								 'go':str(indivAvgList[14]), 'gp':str(indivAvgList[15]),
								 'gq':str(indivAvgList[16]), 'gr':str(indivAvgList[17]),
								 'gs':str(indivAvgList[18]), 'gt':str(indivAvgList[19]),
								 'gu':str(indivAvgList[20]), 'gv':str(indivAvgList[21]),
								 'gw':str(indivAvgList[22]), 'gx':str(indivAvgList[23]),
								 'gy':str(indivAvgList[24]), 'gz':str(indivAvgList[25]),
								 'title':str(graphTitle)}

	hofl.write(scriptStr)
	hofl.close()



#---MAIN---#
filename = sys.argv[1]
window = int(sys.argv[2])

with open(filename, 'r') as fin:
	eventList = fin.readlines()

with open("month.csv", 'r') as fmonth:
	cveMonthList = fmonth.readlines()


for event in eventList:
	event = event.strip()
	name, date, os = event.split(',')
	month, day, year = date.split('-')

	print name, os, date
	print "=================="

	beforeList = []
	afterList = []
	isAfter = False

	for line in cveMonthList:
		line = line.strip()

		eventDate = str(year) + "-" + str(month)
		cveDate = line.split(',')[0].split(':')[1]

		if eventDate == cveDate:
			isAfter = True

		if isAfter and len(afterList) < window + 1:
			afterList.append(line)
		elif not isAfter:
			if len(beforeList) < window:
				beforeList.append(line)
			else:
				beforeList = beforeList[1:]
				beforeList.append(line)

	#convert lists of strings to lists of dictionaries
	beforeList, afterList = convertListStringToListDict(beforeList, afterList)
	
	#Get the minimum and maximum dates
	minDate, maxDate = getDateRange(beforeList, afterList)
	print minDate, maxDate

	#Caclulate growth for each vulnerability type
	indivAvgList = calcIndividualGrowth(beforeList, afterList)

	#Calculate growth for total growth of vulerabilities
	totalAvgList = calcGroupGrowth(beforeList, afterList) #returns before and after averages

	graphName = name + " " + os
	generateJavascriptGraph(graphName, date, indivAvgList, totalAvgList)
	

