# Patrick Whitsell (pdw236)
# Vamsi NC (vn513)
#
# This program counts the number of vulnerabilities in different classifications.
#

import sys
import re

# filename = "Data/NVD-CVE-Data.xml"
# ifl = open(filename, 'r')



keyTermsDict = {
	'bufferOverflow' : ['buffer overflow', 'bufferoverflow'],
	'heapOverflow' : ['heap overflow', 'heapoverflow'],
	'codeExecution' : ['code execution', 'arbitrary execution', 'execute arbitrary', 'execute code'],
	'csrf' : ['cross site request forgery', 'csrf', 'xsrf', 'cross-site request forgery'],
	'xss' : ['cross site scripting', 'xss', 'css'],
	'sqlInjection' : ['sqli', 'sql injection'],
	'denialOfService' : ['denial of service', 'dos', 'ddos'],
	'privilegeEscalation' : ['escalation', 'escalating', 'escalate'],
	'infoExposure' : ['gain info', 'information exposure', 'debugging information', 'sensitive information', 'proprietary information', 'information'],
	'memCorruption' : ['memory corruption'],
	'fileInclusion' : ['file inclusion', 'file-inclusion'],
	'dirTraversal' : ['directory traversal'],
	'bypassAttacks' : ['bypass', 'auth']	
}

CVE_ID = ""
regex_extract_quotes = re.compile('"([^"]*)"')


for line in sys.stdin:
	line = line.strip()

	if "<entry id=" in line:
		CVE_ID = re.findall(regex_extract_quotes, line)[0]

	if "<vuln:summary>" in line:
		for key, val in keyTermsDict.iteritems():
			for v in val:
				if v in line.lower():
					print CVE_ID + "\t" + key + " " + str(1)





